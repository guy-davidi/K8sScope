# TODO.md

This file outlines tasks, features, and improvements planned for the eBPF Manager project.  
Use it as a central reference point for development progress and known issues.

---

## 1. Core Functionality

1. **Program Loading and Unloading**
   - [ ] Implement mechanism to load eBPF bytecode into the kernel.
   - [ ] Provide an API or CLI command to unload eBPF programs on demand.
   - [ ] Add support for pinned maps/programs in `bpffs` (BPF filesystem).

2. **Attach/Detach to Hooks**
   - [ ] Add a function to attach eBPF programs to supported kernel hooks (e.g., kprobes, uprobes, tracepoints, network hooks, etc.).
   - [ ] Support safe detaching to avoid orphaned eBPF programs when shutting down the manager or on unexpected errors.

3. **Map and Helper Function Management**
   - [ ] Provide a uniform interface for creating, reading, and updating eBPF maps.
   - [ ] Add checks to handle map size limits, key/value validation, and memory constraints.
   - [ ] Implement a registry to keep track of available helper functions and dynamically detect supported helpers on different kernel versions.

4. **Multi-Platform and Kernel Compatibility**
   - [ ] Detect kernel version and enable/disable features accordingly (e.g., CO-RE, newer eBPF features).
   - [ ] Provide fallbacks or warnings for unsupported features on older kernels.
   - [ ] Research and test compatibility with popular Linux distributions (e.g., Ubuntu, Fedora, Debian, RHEL).

---

## 2. Configuration & Observability

1. **Configuration Management**
   - [ ] Design a config file or environment variable-based approach for specifying eBPF program paths, maps, and attach points.
   - [ ] Allow runtime overrides (command-line flags or environment vars) to tweak manager behavior.

2. **Metrics and Telemetry**
   - [ ] Expose metrics (e.g., number of attached programs, map usage, memory usage) for monitoring.
   - [ ] Integrate with popular metrics frameworks (Prometheus, StatsD, etc.) if applicable.
   - [ ] Consider adding tracepoints for debugging/observability of eBPF load/unload events.

3. **Logging**
   - [ ] Implement structured logging to capture manager operations and errors.
   - [ ] Offer configurable log levels (debug, info, warn, error).
   - [ ] Use a consistent format or integrate with existing logging libraries.

---

## 3. Security & Stability

1. **Privilege Management**
   - [ ] Determine if root privileges are required or if unprivileged eBPF usage (bpf() syscall) is feasible.
   - [ ] Add safety checks (capabilities, seccomp profiles, etc.) to prevent accidental or malicious usage.

2. **Robust Error Handling**
   - [ ] Ensure the manager handles kernel errors gracefully (e.g., invalid instructions, unsupported ops).
   - [ ] Provide clear error messages and helpful guidance to the user.

3. **Resource Cleanup**
   - [ ] Implement cleanup routines that ensure eBPF maps and programs are detached/unpinned upon termination.
   - [ ] Create a recovery or partial restart mechanism if the manager crashes or is forcibly killed.

---

## 4. Tooling & Developer Experience

1. **CLI / GUI Enhancements**
   - [ ] Develop a command-line interface for basic eBPF management tasks (list, load, unload, attach, detach).
   - [ ] Consider building a minimal GUI or web dashboard for real-time map inspection and statistics visualization (optional).

2. **Documentation**
   - [ ] Provide usage examples and quickstart guides for new users.
   - [ ] Maintain an up-to-date reference for each CLI command, configuration option, and eBPF feature.
   - [ ] Outline a developer guide covering how to add new features, debug issues, and run tests.

3. **Build & Packaging**
   - [ ] Configure a build system (CMake, Makefile, Bazel, etc.) with good defaults.
   - [ ] Set up packaging/distribution (e.g., RPM, DEB, Docker image) for easy installation.

---

## 5. Testing & CI/CD

1. **Unit & Integration Tests**
   - [ ] Create unit tests for core features (loading, unloading, map operations).
   - [ ] Add integration tests that verify end-to-end flows (attach an eBPF program, verify results, detach).
   - [ ] Ensure tests are reproducible across different kernel versions where possible.

2. **CI Pipeline**
   - [ ] Integrate with GitHub Actions, GitLab CI, or another CI system for automated builds and tests.
   - [ ] Test against multiple kernel versions and distributions.
   - [ ] Add code coverage reports and badges.

3. **Fuzzing / Stress Testing**
   - [ ] Implement fuzz tests for eBPF program loading and map operations to detect edge cases.
   - [ ] Integrate stress tests for long-running or high-throughput scenarios.

---

## 6. Future Enhancements & Ideas

- [ ] **CO-RE (Compile Once â€“ Run Everywhere)**: Improve support for eBPF CO-RE to reduce dependency on specific kernel headers.
- [ ] **User-Space Probes**: Extend manager to handle uprobes for instrumentation of user-space applications.
- [ ] **Dynamic Code Generation**: Investigate JIT compilation or generation of eBPF bytecode at runtime.
- [ ] **Integration with Container Platforms**: Explore hooking into Kubernetes or other container runtimes to manage eBPF lifecycle in clusters.
- [ ] **Third-Party Plugin System**: Expose an API so that developers can write custom attachments or eBPF-based logic as plugins.

---

## 7. Known Issues

- [ ] **Issue #XYZ**: Description of known bug or race condition.
- [ ] **Issue #ABC**: Description of known feature limitation or missing functionality.
- [ ] **Workaround**: Outline any temporary workarounds here.

---

## 8. Contributing

- [ ] Contributing guidelines: how to submit pull requests, coding conventions, commit message format, etc.
- [ ] Contributor code of conduct: expected behavior in discussions and code reviews.

---

### Maintainers

- **Main Contact**: _(Name or handle)_
- **Backup / Additional Maintainers**: _(Name or handle)_

---

_This file is intended as a living document. Please keep it updated as features are added, tasks are completed, or priorities change._